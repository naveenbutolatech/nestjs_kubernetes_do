name: Deploy to Development Server test

on:
  push:
    branches: [ dev1 ]
  pull_request:
    branches: [ dev ]

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: us-east-2
      ECR_REPOSITORY: nestjs-app-ecr
      ECR_REGISTRY: your-ecr-registry-url
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: dev-${{ github.sha }}
      run: |
        # Build a Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:dev-latest .
        
        # Push the image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev-latest
        
    - name: Deploy to EC2 Development Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Navigate to application directory
          cd /home/ec2-user/nestjs-dev
          
          # Pull latest code
          git pull origin dev
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          
          # Pull latest dev image from ECR
          docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:dev-latest
          
          # Create docker-compose file for ECR image
          cat > docker-compose.ecr.yml << 'EOF'
          version: "3.9"
          services:
            app:
              image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:dev-latest
              container_name: nestjs-app-dev
              ports:
                - "3000:3000"
              depends_on:
                - postgres
                - redis
              environment:
                NODE_ENV: development
                DATABASE_HOST: postgres
                DATABASE_PORT: 5432
                DATABASE_USER: postgres
                DATABASE_PASSWORD: postgres
                DATABASE_NAME: nestdb
                REDIS_HOST: redis
                REDIS_PORT: 6379
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s

            postgres:
              image: postgres:15-alpine
              container_name: postgres-db-dev
              restart: unless-stopped
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres
                POSTGRES_DB: nestdb
              ports:
                - "5432:5432"
              volumes:
                - pgdata_dev:/var/lib/postgresql/data
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 10s
                timeout: 5s
                retries: 5

            redis:
              image: redis:7-alpine
              container_name: redis-cache-dev
              restart: unless-stopped
              ports:
                - "6379:6379"
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 10s
                timeout: 3s
                retries: 3

          volumes:
            pgdata_dev:
          EOF
          
          # Stop old containers and start with ECR image
          docker-compose -f docker-compose.dev.yml down || true
          docker-compose -f docker-compose.ecr.yml up -d
          
          # Wait for health check
          sleep 30
          curl -f http://localhost:3000/health || exit 1
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Development deployment successful!"
          echo "üåê Application available at: http://${{ secrets.EC2_HOST }}:3000"
        else
          echo "‚ùå Development deployment failed!"
        fi
