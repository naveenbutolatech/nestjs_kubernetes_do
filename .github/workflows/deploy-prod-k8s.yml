name: Deploy to Production (Kubernetes) - DO

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DO_REGISTRY: registry.digitalocean.com
  DO_APP_NAME: nestjs-app-prod
  DO_REGISTRY_NAME: container-regietery--kubernetes
  K8S_NAMESPACE: nestjs-prod

jobs:
  deploy-prod:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to DigitalOcean Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DO_REGISTRY }}
        username: ${{ secrets.DO_REGISTRY_USERNAME }}
        password: ${{ secrets.DO_REGISTRY_TOKEN }}
        
    - name: Build and push Docker image
      env:
        DOCKER_REGISTRY: ${{ env.DO_REGISTRY }}/${{ env.DO_REGISTRY_NAME }}
        DOCKER_REPOSITORY: ${{ env.DO_APP_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG .
        docker build -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:latest .
        docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG
        docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:latest
        
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
        
    - name: Install doctl
      run: |
        # Install doctl CLI
        wget https://github.com/digitalocean/doctl/releases/download/v1.94.0/doctl-1.94.0-linux-amd64.tar.gz
        tar xf doctl-1.94.0-linux-amd64.tar.gz
        sudo mv doctl /usr/local/bin
        doctl version
        
    - name: Configure kubectl for DigitalOcean Kubernetes
      run: |
        # Create doctl config directory
        mkdir -p ~/.config/doctl
        
        # Create doctl config file
        cat > ~/.config/doctl/config.yaml << EOF
        access-token: ${{ secrets.DO_REGISTRY_TOKEN }}
        api-url: https://api.digitalocean.com
        output: text
        EOF
        
        # Download kubeconfig from DigitalOcean
        doctl kubernetes cluster kubeconfig save ${{ secrets.K8S_CLUSTER_NAME }} --set-current-context
        
        # Verify connection
        kubectl get nodes
        
    - name: Create namespace
      run: |
        kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Create registry secret
      run: |
        # Create Docker registry secret for pulling images
        kubectl create secret docker-registry registry-secret \
          --docker-server=${{ env.DO_REGISTRY }} \
          --docker-username=${{ secrets.DO_REGISTRY_USERNAME }} \
          --docker-password=${{ secrets.DO_REGISTRY_TOKEN }} \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Deploy to Kubernetes
      run: |
        # Update image tag in deployment
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/deployment.yaml
        sed -i "s|REGISTRY_IMAGE|${{ env.DO_REGISTRY }}/${{ env.DO_REGISTRY_NAME }}/${{ env.DO_APP_NAME }}|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests (skip ingress for now)
        kubectl apply -f k8s/deployment.yaml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f k8s/service.yaml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f k8s/postgres.yaml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f k8s/redis.yaml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f k8s/secrets.yaml -n ${{ env.K8S_NAMESPACE }}
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/nestjs-app -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        
    - name: Verify deployment
      run: |
        kubectl get pods -n ${{ env.K8S_NAMESPACE }}
        kubectl get services -n ${{ env.K8S_NAMESPACE }}
        kubectl get ingress -n ${{ env.K8S_NAMESPACE }}
        
    - name: Run health check
      run: |
        # Get the service URL
        kubectl port-forward -n ${{ env.K8S_NAMESPACE }} service/nestjs-app 3000:3000 &
        sleep 10
        
        # Health check
        if curl -f http://localhost:3000/health; then
          echo "✅ Health check passed!"
        else
          echo "❌ Health check failed!"
          kubectl logs -n ${{ env.K8S_NAMESPACE }} deployment/nestjs-app --tail=50
          exit 1
        fi
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Production deployment successful!"
          echo "🚀 Application deployed to Kubernetes cluster: ${{ secrets.K8S_CLUSTER_NAME }}"
          echo "📊 Check status: kubectl get pods -n ${{ env.K8S_NAMESPACE }}"
        else
          echo "❌ Production deployment failed!"
        fi
