name: Deploy to DigitalOcean Development Server

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
  workflow_dispatch:

env:
  DO_REGISTRY: registry.digitalocean.com
  DO_APP_NAME: nestjs-app-dev
  DO_REGISTRY_NAME: container-regietery--kubernetes

jobs:
  deploy-do-dev:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to DigitalOcean Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DO_REGISTRY }}
        username: ${{ secrets.DO_REGISTRY_USERNAME }}
        password: ${{ secrets.DO_REGISTRY_TOKEN }}
        
    - name: Build and push Docker image
      env:
        DOCKER_REGISTRY: ${{ env.DO_REGISTRY }}/${{ env.DO_REGISTRY_NAME }}
        DOCKER_REPOSITORY: ${{ env.DO_APP_NAME }}
        IMAGE_TAG: dev-latest
      run: |
        docker build -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG .
        docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG
        
    - name: SSH into Droplet and Deploy
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.DO_DROPLET_HOST }}
        username: ${{ secrets.DO_DROPLET_USERNAME }}
        key: ${{ secrets.DO_DROPLET_SSH_KEY }}
        script: |
          # Login to DigitalOcean Container Registry
          echo "${{ secrets.DO_REGISTRY_TOKEN }}" | docker login ${{ env.DO_REGISTRY }} -u ${{ secrets.DO_REGISTRY_USERNAME }} --password-stdin
          
          # Pull latest dev image
          docker pull ${{ env.DO_REGISTRY }}/${{ env.DO_REGISTRY_NAME }}/${{ env.DO_APP_NAME }}:dev-latest
          
          # Stop and remove existing container
          docker stop nestjs-app-dev || true
          docker rm nestjs-app-dev || true
          
          # Start PostgreSQL and Redis if not running
          docker run -d --name postgres-db-dev \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=nestdb \
            -p 5432:5432 \
            --restart unless-stopped \
            postgres:15-alpine || true
          
          docker run -d --name redis-cache-dev \
            -p 6379:6379 \
            --restart unless-stopped \
            redis:7-alpine || true
          
          # Run the NestJS application
          docker run -d --name nestjs-app-dev \
            -p 3000:3000 \
            --link postgres-db-dev:postgres \
            --link redis-cache-dev:redis \
            -e NODE_ENV=development \
            -e DATABASE_HOST=postgres \
            -e DATABASE_PORT=5432 \
            -e DATABASE_USER=postgres \
            -e DATABASE_PASSWORD=postgres \
            -e DATABASE_NAME=nestdb \
            -e REDIS_HOST=redis \
            -e REDIS_PORT=6379 \
            --restart unless-stopped \
            ${{ env.DO_REGISTRY }}/${{ env.DO_REGISTRY_NAME }}/${{ env.DO_APP_NAME }}:dev-latest
          
          # Wait for application to start
          echo "Waiting for application to start..."
          sleep 30
          
          # Health check
          if curl -f http://localhost:3000/health; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ùå Health check failed!"
            docker logs nestjs-app-dev
            exit 1
          fi
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ DigitalOcean development deployment successful!"
          echo "üåê Application available at: http://${{ secrets.DO_DROPLET_HOST }}:3000"
        else
          echo "‚ùå DigitalOcean development deployment failed!"
        fi
