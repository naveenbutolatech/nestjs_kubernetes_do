name: Deploy to DigitalOcean Development Server

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
  workflow_dispatch:

env:
  DO_REGISTRY: registry.digitalocean.com
  DO_APP_NAME: nestjs-app-dev
  DO_REGISTRY_NAME: container-regietery--kubernetes

jobs:
  deploy-do-dev:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to DigitalOcean Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DO_REGISTRY }}
        username: ${{ secrets.DO_REGISTRY_USERNAME }}
        password: ${{ secrets.DO_REGISTRY_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DO_REGISTRY }}/${{ env.DO_REGISTRY_NAME }}/${{ env.DO_APP_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=dev-latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_DROPLET_HOST }}
        username: ${{ secrets.DO_DROPLET_USERNAME }}
        key: ${{ secrets.DO_DROPLET_SSH_KEY }}
        script: |
          # Navigate to application directory
          cd /home/${{ secrets.DO_DROPLET_USERNAME }}/nestjs-dev
          
          # Initialize git repository if it doesn't exist
          if [ ! -d ".git" ]; then
            git init
            git remote add origin https://github.com/${{ github.repository }}.git
            git fetch origin
            git checkout -b dev origin/dev
          else
            # Pull latest code
            git pull origin dev
          fi
          
          # Login to DigitalOcean Container Registry
          echo "${{ secrets.DO_REGISTRY_TOKEN }}" | docker login ${{ env.DO_REGISTRY }} -u ${{ secrets.DO_REGISTRY_USERNAME }} --password-stdin
          
          # Pull latest dev image from DO Registry
          docker pull ${{ env.DO_REGISTRY }}/${{ env.DO_REGISTRY_NAME }}/${{ env.DO_APP_NAME }}:dev-latest
          
          # Create docker-compose file for DO Registry image
          cat > docker-compose.do.yml << 'EOF'
          services:
            app:
              image: ${{ env.DO_REGISTRY }}/${{ env.DO_REGISTRY_NAME }}/${{ env.DO_APP_NAME }}:dev-latest
              container_name: nestjs-app-dev
              ports:
                - "3000:3000"
              depends_on:
                postgres:
                  condition: service_healthy
                redis:
                  condition: service_healthy
              environment:
                NODE_ENV: development
                DATABASE_HOST: postgres
                DATABASE_PORT: 5432
                DATABASE_USER: postgres
                DATABASE_PASSWORD: postgres
                DATABASE_NAME: nestdb
                REDIS_HOST: redis
                REDIS_PORT: 6379
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s

            postgres:
              image: postgres:15-alpine
              container_name: postgres-db-dev
              restart: unless-stopped
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres
                POSTGRES_DB: nestdb
              ports:
                - "5432:5432"
              volumes:
                - pgdata_dev:/var/lib/postgresql/data
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 10s
                timeout: 5s
                retries: 5

            redis:
              image: redis:7-alpine
              container_name: redis-cache-dev
              restart: unless-stopped
              ports:
                - "6379:6379"
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 10s
                timeout: 3s
                retries: 3

          volumes:
            pgdata_dev:
          EOF
          
          # Stop old containers and start with DO Registry image
          docker-compose -f docker-compose.dev.yml down || true
          docker-compose -f docker-compose.do.yml down || true
          docker-compose -f docker-compose.do.yml up -d
          
          # Wait for health check
          echo "Waiting for services to be healthy..."
          sleep 30
          
          # Health check
          if curl -f http://localhost:3000/health; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ùå Health check failed!"
            docker-compose -f docker-compose.do.yml logs app
            exit 1
          fi
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ DigitalOcean development deployment successful!"
          echo "üåê Application available at: http://${{ secrets.DO_DROPLET_HOST }}:3000"
        else
          echo "‚ùå DigitalOcean development deployment failed!"
        fi
