name: Deploy to Production (EKS)

on:
  push:
    branches: [ main1 ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: nestjs-app-new-ecr
  ECR_REGISTRY: 213028525650.dkr.ecr.us-east-2.amazonaws.com
  EKS_CLUSTER_NAME: nestjs-prod
  NAMESPACE: nestjs-prod

jobs:
  deploy-prod:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push the image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
        
    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        
    - name: Deploy to EKS using Helm
      run: |
        # Update Helm values with new image tag
        helm upgrade --install nestjs-app ./helm-chart \
          --namespace ${{ env.NAMESPACE }} \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set image.repository=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }} \
          --wait \
          --timeout=10m
          
    - name: Verify deployment
      run: |
        kubectl get pods -n ${{ env.NAMESPACE }}
        kubectl get services -n ${{ env.NAMESPACE }}
        kubectl get ingress -n ${{ env.NAMESPACE }}
        
    - name: Run health check
      run: |
        # Get the LoadBalancer URL
        EXTERNAL_IP=$(kubectl get ingress nestjs-app -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        if [ -n "$EXTERNAL_IP" ]; then
          echo "üåê Application available at: http://$EXTERNAL_IP"
          # Wait for the load balancer to be ready
          sleep 60
          # Health check
          curl -f http://$EXTERNAL_IP/health || exit 1
        else
          echo "‚ö†Ô∏è LoadBalancer not ready yet"
        fi
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Production deployment successful!"
          echo "üöÄ Application deployed to EKS cluster: ${{ env.EKS_CLUSTER_NAME }}"
        else
          echo "‚ùå Production deployment failed!"
        fi
